<!DOCTYPE html>
<html>
<head>
  <title>Image Framer - Double Frame</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 2rem;
      line-height: 1.6;
    }

    .nav {
      display: flex;
      justify-content: center;
      gap: 1rem;
      margin-bottom: 2rem;
      border-bottom: 1px solid #eee;
      padding-bottom: 1rem;
    }

    .nav-link {
      padding: 0.5rem 1rem;
      text-decoration: none;
      color: #666;
      border-radius: 4px;
      transition: all 0.2s;
    }

    .nav-link:hover {
      background: #f5f5f5;
      color: #333;
    }

    .nav-link.active {
      background: #007bff;
      color: white;
    }

    h1 {
      color: #333;
      text-align: center;
      margin-bottom: 2rem;
    }

    .upload-container {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 2rem;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .upload-form {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }

    .field {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .field label {
      font-weight: 500;
      color: #444;
    }

    .file-input {
      padding: 0.5rem;
      border: 1px solid #ddd;
      border-radius: 4px;
    }

    .submit-button {
      background-color: #007bff;
      color: white;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.2s;
    }

    .submit-button:hover {
      background-color: #0056b3;
    }

    .submit-button:disabled {
      background-color: #ccc;
      cursor: not-allowed;
    }

    .info {
      margin-top: 2rem;
      padding: 1rem;
      background: #e9ecef;
      border-radius: 4px;
      font-size: 0.9rem;
      color: #666;
    }

    .selected-files {
      margin-top: 1rem;
      padding: 1rem;
      background: #fff;
      border: 1px solid #ddd;
      border-radius: 4px;
      max-height: 200px;
      overflow-y: auto;
    }

    .selected-files ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .selected-files li {
      padding: 0.5rem;
      border-bottom: 1px solid #eee;
    }

    .selected-files li:last-child {
      border-bottom: none;
    }

    .preview-grid {
      display: none;
      margin-top: 2rem;
    }

    .preview-grid.show {
      display: block;
    }

    .preview-item {
      background: white;
      border-radius: 8px;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
      padding: 1rem;
      margin-bottom: 2rem;
    }

    .preview-frame {
      margin-bottom: 1rem;
    }

    .preview-frame img {
      width: 100%;
      height: auto;
      border-radius: 4px;
      border: 1px solid #eee;
    }

    .gravity-controls {
      display: flex;
      gap: 2rem;
      margin-top: 1rem;
    }

    .gravity-control {
      flex: 1;
      background: #f8f9fa;
      padding: 1rem;
      border-radius: 4px;
    }

    .gravity-control label {
      display: block;
      margin-bottom: 0.5rem;
      color: #666;
      font-weight: 500;
    }

    .gravity-control select {
      width: 100%;
      padding: 0.5rem;
      border: 1px solid #ddd;
      border-radius: 4px;
      background-color: white;
      font-size: 0.9rem;
    }

    .preview-actions {
      display: none;
      margin-top: 2rem;
      gap: 1rem;
      justify-content: center;
    }

    .preview-actions.show {
      display: flex;
    }

    .reset-button {
      background-color: #6c757d;
      color: white;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.2s;
    }

    .reset-button:hover {
      background-color: #5a6268;
    }

    .success-screen {
      display: none;
      text-align: center;
      margin-top: 2rem;
    }

    .success-screen.show {
      display: block;
    }

    .success-details {
      margin: 1rem 0;
      color: #666;
    }

    .action-buttons {
      display: flex;
      gap: 1rem;
      justify-content: center;
      margin-top: 2rem;
    }

    .download-link {
      background-color: #28a745;
      color: white;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
      text-decoration: none;
      transition: background-color 0.2s;
    }

    .download-link:hover {
      background-color: #218838;
    }

    .processing-spinner {
      display: none;
      margin: 2rem auto;
      width: 50px;
      height: 50px;
      border: 3px solid #f3f3f3;
      border-top: 3px solid #3498db;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .loading {
      display: none;
      width: 20px;
      height: 20px;
      border: 2px solid #f3f3f3;
      border-top: 2px solid #3498db;
      border-radius: 50%;
      animation: spin 1s linear infinite;
      margin-left: 0.5rem;
    }

    .loading.show {
      display: inline-block;
    }

    .double-frame-preview {
      display: flex;
      gap: 1rem;
      margin-bottom: 1rem;
    }

    .frame-half {
      flex: 1;
      background: #f8f9fa;
      padding: 1rem;
      border-radius: 4px;
    }
  </style>
</head>
<body>
  <h1>Image Framer</h1>

  <nav class="nav">
    <a href="/" class="nav-link" id="singleFrameLink">Single Frame</a>
    <a href="/double" class="nav-link active" id="doubleFrameLink">Double Frame</a>
  </nav>

  <div class="upload-container">
    <form action="/preview-double" method="post" enctype="multipart/form-data" class="upload-form" id="uploadForm">
      <div class="double-frame-preview">
        <div class="frame-half">
          <div class="field">
            <label for="leftImage">Left Image</label>
            <input type="file" name="images[]" id="leftImage" accept="image/*" required class="file-input" onchange="updateFileList()">
          </div>
        </div>
        <div class="frame-half">
          <div class="field">
            <label for="rightImage">Right Image</label>
            <input type="file" name="images[]" id="rightImage" accept="image/*" required class="file-input" onchange="updateFileList()">
          </div>
        </div>
      </div>

      <div class="selected-files" id="fileList" style="display: none;">
        <div class="file-count" id="fileCount"></div>
        <ul id="fileListUl"></ul>
      </div>

      <div class="actions">
        <button type="submit" class="submit-button" id="submitBtn" disabled>Frame Images</button>
      </div>
    </form>
  </div>

  <div class="info">
    <p>Upload two images and they will be framed side by side with a white border of 200px on all sides and between images, resulting in a final size of 3840x2160 pixels. The framed image will be available for download.</p>
  </div>

  <div class="processing-spinner" id="processingSpinner"></div>

  <div class="preview-grid" id="previewGrid"></div>

  <div class="preview-actions" id="previewActions">
    <button class="submit-button" id="exportBtn" disabled>Export Frame</button>
    <button class="reset-button" id="resetButton">Start Over</button>
  </div>

  <div class="success-screen" id="successScreen">
    <h2>Frame Exported Successfully! ðŸŽ‰</h2>
    <div class="success-details">
      <p>Your double frame has been created</p>
      <p>Processing time: <span id="processingTime">0</span> seconds</p>
    </div>
    <div class="action-buttons">
      <button class="reset-button" id="newExportButton">Create Another</button>
    </div>
  </div>

  <script>
    function updateFileList() {
      const leftInput = document.getElementById('leftImage');
      const rightInput = document.getElementById('rightImage');
      const fileList = document.getElementById('fileList');
      const fileListUl = document.getElementById('fileListUl');
      const fileCount = document.getElementById('fileCount');
      const submitBtn = document.getElementById('submitBtn');
      fileListUl.innerHTML = '';
      
      const files = [leftInput.files[0], rightInput.files[0]].filter(Boolean);
      
      if (files.length > 0) {
        fileList.style.display = 'block';
        fileCount.textContent = `${files.length} of 2 images selected`;
        
        files.forEach(file => {
          const li = document.createElement('li');
          li.textContent = `${file.name} (${(file.size / 1024).toFixed(1)} KB)`;
          fileListUl.appendChild(li);
        });
        
        submitBtn.disabled = files.length !== 2;
      } else {
        fileList.style.display = 'none';
        submitBtn.disabled = true;
      }
    }

    function resetForm() {
      // Show upload form and info
      document.querySelector('.upload-container').style.display = 'block';
      document.querySelector('.info').style.display = 'block';
      
      // Clear file inputs
      document.getElementById('leftImage').value = '';
      document.getElementById('rightImage').value = '';
      
      // Hide file list
      document.getElementById('fileList').style.display = 'none';
      
      // Reset file count
      document.getElementById('fileCount').textContent = '';
      
      // Disable submit button
      document.getElementById('submitBtn').disabled = true;
      
      // Clear selected files list
      document.getElementById('fileListUl').innerHTML = '';
      
      // Clear preview grid
      document.getElementById('previewGrid').innerHTML = '';
      document.getElementById('previewGrid').classList.remove('show');
      document.getElementById('previewActions').classList.remove('show');
    }

    async function handleGravityChange(select, previewId, position) {
      const previewItem = select.closest('.preview-item');
      const loading = previewItem.querySelector('.loading');
      const gravity = select.value;
      const previousValue = previewGravitySettings.get(`${previewId}-${position}`);
      
      try {
        loading.classList.add('show');
        
        const response = await fetch('/reprocess-double', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ previewId, position, gravity })
        });
        
        if (!response.ok) {
          throw new Error('Failed to update image position');
        }
        
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
          throw new Error('Server returned non-JSON response');
        }

        const data = await response.json();
        const img = document.querySelector(`img[data-preview-id="${previewId}"]`);
        img.src = `${data.url}?t=${Date.now()}`;
        previewGravitySettings.set(`${previewId}-${position}`, gravity);
      } catch (error) {
        console.error('Error:', error);
        select.value = previousValue;
        alert('Failed to change image position. Please try again.');
      } finally {
        loading.classList.remove('show');
      }
    }

    function createPreviewItem(preview) {
      const previewItem = document.createElement('div');
      previewItem.className = 'preview-item';
      previewItem.dataset.id = preview.id;
      
      previewItem.innerHTML = `
        <div class="preview-frame">
          <img src="${preview.url}" alt="Double Frame Preview" data-preview-id="${preview.id}">
        </div>
        <div class="gravity-controls">
          <div class="gravity-control">
            <label>Left Image Position:</label>
            <select onchange="handleGravityChange(this, '${preview.id}', 'left')">
              <option value="center" ${preview.leftGravity === 'center' ? 'selected' : ''}>Center</option>
              <option value="north" ${preview.leftGravity === 'north' ? 'selected' : ''}>Top</option>
              <option value="south" ${preview.leftGravity === 'south' ? 'selected' : ''}>Bottom</option>
              <option value="west" ${preview.leftGravity === 'west' ? 'selected' : ''}>Left</option>
              <option value="east" ${preview.leftGravity === 'east' ? 'selected' : ''}>Right</option>
              <option value="northwest" ${preview.leftGravity === 'northwest' ? 'selected' : ''}>Top Left</option>
              <option value="northeast" ${preview.leftGravity === 'northeast' ? 'selected' : ''}>Top Right</option>
              <option value="southwest" ${preview.leftGravity === 'southwest' ? 'selected' : ''}>Bottom Left</option>
              <option value="southeast" ${preview.leftGravity === 'southeast' ? 'selected' : ''}>Bottom Right</option>
            </select>
          </div>
          <div class="gravity-control">
            <label>Right Image Position:</label>
            <select onchange="handleGravityChange(this, '${preview.id}', 'right')">
              <option value="center" ${preview.rightGravity === 'center' ? 'selected' : ''}>Center</option>
              <option value="north" ${preview.rightGravity === 'north' ? 'selected' : ''}>Top</option>
              <option value="south" ${preview.rightGravity === 'south' ? 'selected' : ''}>Bottom</option>
              <option value="west" ${preview.rightGravity === 'west' ? 'selected' : ''}>Left</option>
              <option value="east" ${preview.rightGravity === 'east' ? 'selected' : ''}>Right</option>
              <option value="northwest" ${preview.rightGravity === 'northwest' ? 'selected' : ''}>Top Left</option>
              <option value="northeast" ${preview.rightGravity === 'northeast' ? 'selected' : ''}>Top Right</option>
              <option value="southwest" ${preview.rightGravity === 'southwest' ? 'selected' : ''}>Bottom Left</option>
              <option value="southeast" ${preview.rightGravity === 'southeast' ? 'selected' : ''}>Bottom Right</option>
            </select>
          </div>
        </div>
        <div class="loading"></div>
      `;
      
      return previewItem;
    }

    // Form submission handler
    document.getElementById('uploadForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      const spinner = document.getElementById('processingSpinner');
      const submitBtn = document.getElementById('submitBtn');
      const originalButtonText = submitBtn.textContent;
      
      try {
        submitBtn.disabled = true;
        submitBtn.textContent = 'Processing...';
        spinner.style.display = 'block';
        
        const response = await fetch('/preview-double', {
          method: 'POST',
          body: new FormData(this)
        });
        
        const data = await response.json();
        if (!response.ok) {
          throw new Error(data.error || 'Failed to process images');
        }
        
        // Clear the form and hide upload container
        this.reset();
        document.querySelector('.upload-container').style.display = 'none';
        document.querySelector('.info').style.display = 'none';
        
        // Show preview
        const previewGrid = document.getElementById('previewGrid');
        previewGrid.innerHTML = '';
        previewGrid.classList.add('show');
        previewGrid.appendChild(createPreviewItem(data.preview));
        
        // Show preview actions
        document.getElementById('previewActions').classList.add('show');
        document.getElementById('exportBtn').disabled = false;
        
      } catch (error) {
        alert(error.message);
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = originalButtonText;
        spinner.style.display = 'none';
      }
    });

    // Export button handler
    document.getElementById('exportBtn').addEventListener('click', async function(e) {
      e.preventDefault();
      const startTime = new Date();
      const spinner = document.getElementById('processingSpinner');
      const exportBtn = document.getElementById('exportBtn');
      const originalButtonText = exportBtn.textContent;
      
      try {
        spinner.style.display = 'block';
        exportBtn.disabled = true;
        exportBtn.textContent = 'Exporting...';
        
        const previewId = document.querySelector('.preview-item').dataset.id;
        const response = await fetch('/export', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ 
            previewId,
            isDouble: true
          })
        });
        
        if (!response.ok) {
          throw new Error('Failed to export frame');
        }
        
        const data = await response.json();
        
        // Create a temporary link and trigger download
        const link = document.createElement('a');
        link.href = data.url;
        link.download = data.filename || 'framed_image.jpg';
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
        
        // Show success screen
        const successScreen = document.getElementById('successScreen');
        document.getElementById('processingTime').textContent = 
          ((new Date() - startTime) / 1000).toFixed(1);
        successScreen.classList.add('show');
        
        // Hide preview grid and actions
        document.getElementById('previewGrid').classList.remove('show');
        document.getElementById('previewActions').classList.remove('show');
        
      } catch (error) {
        alert(error.message);
      } finally {
        spinner.style.display = 'none';
        exportBtn.disabled = false;
        exportBtn.textContent = originalButtonText;
      }
    });

    // Add click handler for reset button
    document.getElementById('resetButton').addEventListener('click', function(e) {
      e.preventDefault();
      resetForm();
    });

    // Add click handler for new export button
    document.getElementById('newExportButton').addEventListener('click', function(e) {
      e.preventDefault();
      resetForm();
      document.getElementById('successScreen').classList.remove('show');
    });

    // Initialize preview gravity settings
    const previewGravitySettings = new Map();
  </script>
</body>
</html>
