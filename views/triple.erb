<!DOCTYPE html>
<html>
<head>
  <title>Image Framer - Triple Frame</title>
  <link rel="stylesheet" href="/css/styles.css">
</head>
<body>
  <h1>Image Framer</h1>

  <nav class="nav">
    <a href="/" class="nav-link">Single Frame</a>
    <a href="/double" class="nav-link">Double Frame</a>
    <a href="/triple" class="nav-link active">Triple Frame</a>
  </nav>

  <div class="upload-container">
    <form id="uploadForm" class="upload-form">
      <div class="upload-fields">
        <div class="field">
          <label for="leftImage">Left Image:</label>
          <input type="file" id="leftImage" class="file-input" accept="image/*" required>
        </div>
        <div class="field">
          <label for="middleImage">Middle Image:</label>
          <input type="file" id="middleImage" class="file-input" accept="image/*" required>
        </div>
        <div class="field">
          <label for="rightImage">Right Image:</label>
          <input type="file" id="rightImage" class="file-input" accept="image/*" required>
        </div>
      </div>
      <div id="fileList" class="selected-files" style="display: none;">
        <ul></ul>
      </div>
      <div class="actions">
        <button type="submit" id="submitBtn" class="submit-button" disabled>Frame Images</button>
      </div>
    </form>
  </div>

  <div class="info" id="pageInfo">
    <p>Create a stunning triptych by combining three images side by side. Perfect for showcasing a series of related photos, telling a visual story, or displaying panoramic scenes split into three parts. Each image can be individually positioned to create the perfect composition.</p>
  </div>

  <div id="previewGrid" class="preview-grid">
    <!-- Preview items will be inserted here -->
  </div>

  <div id="previewActions" class="preview-actions">
    <button id="exportBtn" class="submit-button">Export</button>
    <button id="resetBtn" class="reset-button">Start Over</button>
    <div id="processingSpinner" class="loading"></div>
  </div>

  <div id="successScreen" class="success-screen">
    <div class="success-message">Your framed image is ready!</div>
    <div id="processingTime" class="processing-time"></div>
    <a id="downloadLink" class="submit-button" download>Download Framed Image</a>
    <button id="startOverBtn" class="reset-button" style="margin-top: 1rem;">Create Another Frame</button>
  </div>

  <script>
    function updateFileList() {
      const leftInput = document.getElementById('leftImage');
      const middleInput = document.getElementById('middleImage');
      const rightInput = document.getElementById('rightImage');
      const fileList = document.getElementById('fileList');
      const submitBtn = document.getElementById('submitBtn');
      const files = [];

      if (leftInput.files.length) files.push({ name: leftInput.files[0].name, position: 'Left' });
      if (middleInput.files.length) files.push({ name: middleInput.files[0].name, position: 'Middle' });
      if (rightInput.files.length) files.push({ name: rightInput.files[0].name, position: 'Right' });

      if (files.length > 0) {
        const ul = fileList.querySelector('ul');
        ul.innerHTML = files.map(file => `<li>${file.position}: ${file.name}</li>`).join('');
        fileList.style.display = 'block';
      } else {
        fileList.style.display = 'none';
      }

      submitBtn.disabled = !(leftInput.files.length && middleInput.files.length && rightInput.files.length);
    }

    // Store gravity settings for each preview
    const previewGravitySettings = new Map();

    function resetForm() {
      document.getElementById('uploadForm').reset();
      document.getElementById('fileList').style.display = 'none';
      document.getElementById('previewGrid').classList.remove('show');
      document.getElementById('previewActions').classList.remove('show');
      document.getElementById('successScreen').classList.remove('show');
      document.getElementById('submitBtn').disabled = true;
      document.getElementById('pageInfo').classList.remove('hide');
    }

    async function handleGravityChange(select, previewId, position) {
      const previewItem = select.closest('.preview-item');
      const loading = previewItem.querySelector('.loading');
      const gravity = select.value;
      const previousValue = previewGravitySettings.get(`${previewId}-${position}`);
      
      try {
        loading.classList.add('show');
        
        const response = await fetch('/reprocess-triple', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ previewId, position, gravity })
        });
        
        if (!response.ok) {
          throw new Error('Failed to update image position');
        }
        
        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
          throw new Error('Server returned non-JSON response');
        }

        const data = await response.json();
        const img = document.querySelector(`img[data-preview-id="${previewId}"]`);
        img.src = `${data.url}?t=${Date.now()}`;
        previewGravitySettings.set(`${previewId}-${position}`, gravity);
      } catch (error) {
        console.error('Error:', error);
        select.value = previousValue;
        alert('Failed to change image position. Please try again.');
      } finally {
        loading.classList.remove('show');
      }
    }

    function createPreviewItem(preview) {
      const previewItem = document.createElement('div');
      previewItem.className = 'preview-item';
      previewItem.dataset.id = preview.id;
      
      previewItem.innerHTML = `
        <div class="preview-frame">
          <img src="${preview.url}" alt="Triple Frame Preview" data-preview-id="${preview.id}">
        </div>
        <div class="gravity-controls">
          <div class="gravity-control">
            <label>Left Image Position:</label>
            <select onchange="handleGravityChange(this, '${preview.id}', 'left')">
              <option value="center" ${preview.leftGravity === 'center' ? 'selected' : ''}>Center</option>
              <option value="north" ${preview.leftGravity === 'north' ? 'selected' : ''}>Top</option>
              <option value="south" ${preview.leftGravity === 'south' ? 'selected' : ''}>Bottom</option>
              <option value="west" ${preview.leftGravity === 'west' ? 'selected' : ''}>Left</option>
              <option value="east" ${preview.leftGravity === 'east' ? 'selected' : ''}>Right</option>
              <option value="northwest" ${preview.leftGravity === 'northwest' ? 'selected' : ''}>Top Left</option>
              <option value="northeast" ${preview.leftGravity === 'northeast' ? 'selected' : ''}>Top Right</option>
              <option value="southwest" ${preview.leftGravity === 'southwest' ? 'selected' : ''}>Bottom Left</option>
              <option value="southeast" ${preview.leftGravity === 'southeast' ? 'selected' : ''}>Bottom Right</option>
            </select>
          </div>
          <div class="gravity-control">
            <label>Middle Image Position:</label>
            <select onchange="handleGravityChange(this, '${preview.id}', 'middle')">
              <option value="center" ${preview.middleGravity === 'center' ? 'selected' : ''}>Center</option>
              <option value="north" ${preview.middleGravity === 'north' ? 'selected' : ''}>Top</option>
              <option value="south" ${preview.middleGravity === 'south' ? 'selected' : ''}>Bottom</option>
              <option value="west" ${preview.middleGravity === 'west' ? 'selected' : ''}>Left</option>
              <option value="east" ${preview.middleGravity === 'east' ? 'selected' : ''}>Right</option>
              <option value="northwest" ${preview.middleGravity === 'northwest' ? 'selected' : ''}>Top Left</option>
              <option value="northeast" ${preview.middleGravity === 'northeast' ? 'selected' : ''}>Top Right</option>
              <option value="southwest" ${preview.middleGravity === 'southwest' ? 'selected' : ''}>Bottom Left</option>
              <option value="southeast" ${preview.middleGravity === 'southeast' ? 'selected' : ''}>Bottom Right</option>
            </select>
          </div>
          <div class="gravity-control">
            <label>Right Image Position:</label>
            <select onchange="handleGravityChange(this, '${preview.id}', 'right')">
              <option value="center" ${preview.rightGravity === 'center' ? 'selected' : ''}>Center</option>
              <option value="north" ${preview.rightGravity === 'north' ? 'selected' : ''}>Top</option>
              <option value="south" ${preview.rightGravity === 'south' ? 'selected' : ''}>Bottom</option>
              <option value="west" ${preview.rightGravity === 'west' ? 'selected' : ''}>Left</option>
              <option value="east" ${preview.rightGravity === 'east' ? 'selected' : ''}>Right</option>
              <option value="northwest" ${preview.rightGravity === 'northwest' ? 'selected' : ''}>Top Left</option>
              <option value="northeast" ${preview.rightGravity === 'northeast' ? 'selected' : ''}>Top Right</option>
              <option value="southwest" ${preview.rightGravity === 'southwest' ? 'selected' : ''}>Bottom Left</option>
              <option value="southeast" ${preview.rightGravity === 'southeast' ? 'selected' : ''}>Bottom Right</option>
            </select>
          </div>
        </div>
        <div class="loading"></div>
      `;
      
      return previewItem;
    }

    // Form submission handler
    document.getElementById('uploadForm').addEventListener('submit', async function(e) {
      e.preventDefault();
      const spinner = document.getElementById('processingSpinner');
      const submitBtn = document.getElementById('submitBtn');
      const originalButtonText = submitBtn.textContent;
      
      try {
        submitBtn.disabled = true;
        submitBtn.textContent = 'Processing...';
        spinner.style.display = 'block';

        const formData = new FormData();
        formData.append('leftImage', document.getElementById('leftImage').files[0]);
        formData.append('middleImage', document.getElementById('middleImage').files[0]);
        formData.append('rightImage', document.getElementById('rightImage').files[0]);
        
        const response = await fetch('/preview-triple', {
          method: 'POST',
          body: formData
        });
        
        if (!response.ok) {
          throw new Error('Failed to upload images');
        }
        
        const preview = await response.json();
        
        // Store initial gravity settings
        previewGravitySettings.set(`${preview.id}-left`, preview.leftGravity);
        previewGravitySettings.set(`${preview.id}-middle`, preview.middleGravity);
        previewGravitySettings.set(`${preview.id}-right`, preview.rightGravity);
        
        const previewGrid = document.getElementById('previewGrid');
        previewGrid.innerHTML = '';
        previewGrid.appendChild(createPreviewItem(preview));
        previewGrid.classList.add('show');
        
        document.getElementById('previewActions').classList.add('show');
        document.querySelector('.upload-container').classList.add('hide');
        document.getElementById('pageInfo').classList.add('hide');
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to process images. Please try again.');
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = originalButtonText;
        spinner.style.display = 'none';
      }
    });

    // File input change handlers
    document.getElementById('leftImage').addEventListener('change', updateFileList);
    document.getElementById('middleImage').addEventListener('change', updateFileList);
    document.getElementById('rightImage').addEventListener('change', updateFileList);

    // Reset button handler
    document.getElementById('resetBtn').addEventListener('click', function() {
      resetForm();
      document.querySelector('.upload-container').classList.remove('hide');
    });
    document.getElementById('startOverBtn').addEventListener('click', function() {
      resetForm();
      document.querySelector('.upload-container').classList.remove('hide');
    });

    // Export button handler
    document.getElementById('exportBtn').addEventListener('click', async function(e) {
      e.preventDefault();
      const startTime = new Date();
      const spinner = document.getElementById('processingSpinner');
      const exportBtn = document.getElementById('exportBtn');
      const originalButtonText = exportBtn.textContent;
      
      try {
        exportBtn.disabled = true;
        exportBtn.textContent = 'Processing...';
        spinner.style.display = 'block';
        
        const previewId = document.querySelector('.preview-item').dataset.id;
        const response = await fetch('/export', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ previewId })
        });
        
        if (!response.ok) {
          throw new Error('Failed to export image');
        }
        
        const result = await response.json();
        
        // Show success screen
        const endTime = new Date();
        const processingTime = ((endTime - startTime) / 1000).toFixed(2);
        document.getElementById('processingTime').textContent = `Processing time: ${processingTime} seconds`;
        
        const downloadLink = document.getElementById('downloadLink');
        downloadLink.href = result.url;
        downloadLink.download = result.filename;
        
        document.getElementById('successScreen').classList.add('show');
        document.getElementById('previewGrid').classList.remove('show');
        document.getElementById('previewActions').classList.remove('show');
      } catch (error) {
        console.error('Error:', error);
        alert('Failed to export image. Please try again.');
      } finally {
        exportBtn.disabled = false;
        exportBtn.textContent = originalButtonText;
        spinner.style.display = 'none';
      }
    });
  </script>
</body>
</html>
