<!DOCTYPE html>
<html>
<head>
  <title>Image Framer</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif;
      max-width: 800px;
      margin: 0 auto;
      padding: 2rem;
      line-height: 1.6;
    }

    h1 {
      color: #333;
      text-align: center;
      margin-bottom: 2rem;
    }

    .upload-container {
      background: #f8f9fa;
      border-radius: 8px;
      padding: 2rem;
      box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .upload-form {
      display: flex;
      flex-direction: column;
      gap: 1.5rem;
    }

    .field {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
    }

    .field label {
      font-weight: 500;
      color: #444;
    }

    .file-input {
      padding: 0.5rem;
      border: 1px solid #ddd;
      border-radius: 4px;
    }

    .submit-button {
      background-color: #007bff;
      color: white;
      padding: 0.75rem 1.5rem;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1rem;
      transition: background-color 0.2s;
    }

    .submit-button:hover {
      background-color: #0056b3;
    }

    .submit-button:disabled {
      background-color: #ccc;
      cursor: not-allowed;
    }

    .info {
      margin-top: 2rem;
      padding: 1rem;
      background: #e9ecef;
      border-radius: 4px;
      font-size: 0.9rem;
      color: #666;
    }

    .selected-files {
      margin-top: 1rem;
      padding: 1rem;
      background: #fff;
      border: 1px solid #ddd;
      border-radius: 4px;
      max-height: 200px;
      overflow-y: auto;
    }

    .selected-files ul {
      list-style: none;
      padding: 0;
      margin: 0;
    }

    .selected-files li {
      padding: 0.5rem;
      border-bottom: 1px solid #eee;
    }

    .selected-files li:last-child {
      border-bottom: none;
    }

    .file-count {
      color: #007bff;
      font-weight: 500;
      margin-bottom: 0.5rem;
    }
    
    /* Success screen styles */
    .success-screen {
      display: none;
      margin-top: 2rem;
      padding: 2rem;
      background: #f0fff0;
      border: 1px solid #4CAF50;
      border-radius: 8px;
      text-align: center;
    }

    .success-screen.show {
      display: block;
      animation: fadeIn 0.5s ease-in;
    }

    .success-screen h2 {
      color: #4CAF50;
      margin-bottom: 1rem;
    }

    .success-details {
      margin: 1rem 0;
      color: #666;
    }

    .download-link {
      display: inline-block;
      background: #4CAF50;
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 4px;
      text-decoration: none;
      transition: background-color 0.2s;
    }

    .download-link:hover {
      background: #45a049;
    }

    .reset-button {
      display: inline-block;
      background: #6c757d;
      color: white;
      padding: 0.75rem 1.5rem;
      border-radius: 4px;
      text-decoration: none;
      transition: background-color 0.2s;
      margin-left: 1rem;
      cursor: pointer;
      border: none;
      font: inherit;
    }

    .reset-button:hover {
      background: #5a6268;
    }

    /* Processing spinner */
    .processing-spinner {
      display: none;
      margin: 2rem auto;
      width: 50px;
      height: 50px;
      border: 5px solid #f3f3f3;
      border-top: 5px solid #4CAF50;
      border-radius: 50%;
      animation: spin 1s linear infinite;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    @keyframes fadeIn {
      from { opacity: 0; }
      to { opacity: 1; }
    }
  </style>
</head>
<body>
  <h1>Image Framer</h1>

  <div class="upload-container">
    <form action="/frame" method="post" enctype="multipart/form-data" class="upload-form">
      <div class="field">
        <label for="images">Choose images to frame</label>
        <input type="file" name="images[]" id="images" accept="image/*" required multiple class="file-input" onchange="updateFileList()">
      </div>

      <div class="selected-files" id="fileList" style="display: none;">
        <div class="file-count" id="fileCount"></div>
        <ul id="fileListUl"></ul>
      </div>

      <div class="actions">
        <button type="submit" class="submit-button" id="submitBtn" disabled>Frame Images</button>
      </div>
    </form>
  </div>

  <div class="info">
    <p>Upload multiple images and they will be framed with a white border of 200px on all sides, resulting in a final size of 3840x2160 pixels. All processed images will be available for download.</p>
  </div>

  <div class="processing-spinner" id="processingSpinner"></div>

  <div class="success-screen" id="successScreen">
    <h2>Images Processed Successfully! ðŸŽ‰</h2>
    <div class="success-details">
      <p><span id="processedCount">0</span> images have been processed and framed</p>
      <p>Processing time: <span id="processingTime">0</span> seconds</p>
    </div>
    <div class="action-buttons">
      <a href="#" class="download-link" id="downloadLink">Download Framed Images</a>
      <button class="reset-button" id="resetButton">Process More Images</button>
    </div>
  </div>

  <script>
    function updateFileList() {
      const input = document.getElementById('images');
      const fileList = document.getElementById('fileList');
      const fileListUl = document.getElementById('fileListUl');
      const fileCount = document.getElementById('fileCount');
      const submitBtn = document.getElementById('submitBtn');
      const successScreen = document.getElementById('successScreen');
      
      fileListUl.innerHTML = '';
      successScreen.classList.remove('show');
      
      if (input.files.length > 0) {
        fileList.style.display = 'block';
        fileCount.textContent = `${input.files.length} file(s) selected`;
        
        Array.from(input.files).forEach(file => {
          const li = document.createElement('li');
          li.textContent = `${file.name} (${(file.size / 1024).toFixed(1)} KB)`;
          fileListUl.appendChild(li);
        });
        
        submitBtn.disabled = false;
      } else {
        fileList.style.display = 'none';
        submitBtn.disabled = true;
      }
    }

    function resetForm() {
      // Clear file input
      document.getElementById('images').value = '';
      
      // Hide file list and success screen
      document.getElementById('fileList').style.display = 'none';
      document.getElementById('successScreen').classList.remove('show');
      
      // Reset file count
      document.getElementById('fileCount').textContent = '';
      
      // Disable submit button
      document.getElementById('submitBtn').disabled = true;
      
      // Clear selected files list
      document.getElementById('fileListUl').innerHTML = '';
    }

    // Add click handler for reset button
    document.getElementById('resetButton').addEventListener('click', function(e) {
      e.preventDefault();
      resetForm();
    });

    // Add download handler
    document.getElementById('downloadLink').addEventListener('click', function(e) {
      e.preventDefault();
      const url = this.getAttribute('data-url');
      const filename = this.getAttribute('data-filename');
      
      fetch(url)
        .then(response => response.blob())
        .then(blob => {
          const downloadUrl = window.URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = downloadUrl;
          link.download = filename;
          document.body.appendChild(link);
          link.click();
          link.remove();
          window.URL.revokeObjectURL(downloadUrl);
        })
        .catch(error => {
          console.error('Download error:', error);
          alert('Error downloading the file. Please try again.');
        });
    });

    document.querySelector('form').addEventListener('submit', function(e) {
      e.preventDefault();
      const startTime = new Date();
      const spinner = document.getElementById('processingSpinner');
      const fileCount = document.getElementById('images').files.length;
      
      // Show spinner
      spinner.style.display = 'block';
      
      // Submit form data
      fetch('/frame', {
        method: 'POST',
        body: new FormData(this)
      })
      .then(response => response.json())
      .then(data => {
        // Hide spinner
        spinner.style.display = 'none';
        
        // Calculate processing time
        const processingTime = ((new Date() - startTime) / 1000).toFixed(1);
        
        // Update success screen
        document.getElementById('processedCount').textContent = data.count;
        document.getElementById('processingTime').textContent = processingTime;
        
        // Update download link text and data
        const downloadLink = document.getElementById('downloadLink');
        downloadLink.setAttribute('data-url', data.url);
        downloadLink.setAttribute('data-filename', data.filename);
        downloadLink.textContent = data.count === 1 ? 'Download Framed Image' : 'Download Framed Images (ZIP)';
        
        document.getElementById('successScreen').classList.add('show');
      })
      .catch(error => {
        console.error('Error:', error);
        spinner.style.display = 'none';
        alert('An error occurred while processing the images. Please try again.');
      });
    });
  </script>
</body>
</html>
