<%= partial :head %>
<body class="max-w-7xl mx-auto p-8 font-sans leading-relaxed">
  <h1 class="text-3xl font-bold text-gray-800 text-center mb-8">Image Framer</h1>

  <%= partial :nav %>

  <div class="bg-white rounded-lg shadow-sm p-8 border border-gray-200">
    <form class="flex flex-col gap-6" id="uploadForm">
      <div class="flex flex-col gap-2">
        <label for="images" class="font-medium text-gray-700">Choose images to frame</label>
        <input type="file" name="images[]" id="images" accept="image/*" required multiple class="p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" onchange="updateFileList()">
      </div>

      <%= partial :file_list %>

      <div class="flex justify-start">
        <button type="submit" class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-200 disabled:bg-gray-300 disabled:cursor-not-allowed" id="submitBtn" disabled>Frame Images</button>
      </div>
    </form>
  </div>

  <div class="mt-8 p-4 bg-gray-50 rounded-lg text-gray-600 text-sm" id="pageInfo">
    <p>Upload multiple images and they will be framed with a white border of 200px on all sides, resulting in a final size of 3840x2160 pixels. All processed images will be available for download.</p>
  </div>

  <%= partial :spinner %>

  <%= partial :preview_grid %>

  <div class="hidden mt-8 flex justify-center gap-4" id="previewActions">
    <button class="bg-blue-500 text-white px-6 py-2 rounded-md hover:bg-blue-600 transition-colors duration-200 disabled:bg-gray-300 disabled:cursor-not-allowed" id="exportBtn" disabled>Export Selected</button>
    <button class="bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-200" id="resetBtn">Start Over</button>
  </div>

  <div class="hidden mt-8 p-8 bg-green-50 border border-green-200 rounded-lg text-center" id="successScreen">
    <h2 class="text-2xl font-bold text-green-600 mb-4">Images Exported Successfully! ðŸŽ‰</h2>
    <div class="text-gray-600 space-y-2">
      <p><span id="processedCount" class="font-medium">0</span> images have been exported</p>
      <p>Processing time: <span id="processingTime" class="font-medium">0</span> seconds</p>
    </div>
    <div class="mt-8 flex justify-center gap-4">
      <a href="#" class="bg-green-500 text-white px-6 py-2 rounded-md hover:bg-green-600 transition-colors duration-200" id="downloadLink">Download Framed Images</a>
      <button class="bg-gray-500 text-white px-6 py-2 rounded-md hover:bg-gray-600 transition-colors duration-200" id="startOverBtn">Start Over</button>
    </div>
  </div>

  <script>
    // Track selected previews and their gravity settings
    const selectedPreviews = new Set();
    const previewGravitySettings = new Map();

    function updateFileList() {
      const input = document.getElementById('images');
      const fileList = document.getElementById('fileList');
      const fileListUl = document.getElementById('fileListUl');
      const fileCount = document.getElementById('fileCount');
      const submitBtn = document.getElementById('submitBtn');
      const successScreen = document.getElementById('successScreen');
      
      fileListUl.innerHTML = '';
      successScreen.classList.add('hidden');
      
      if (input.files.length > 0) {
        fileList.classList.remove('hidden');
        fileCount.textContent = `${input.files.length} file(s) selected`;
        
        Array.from(input.files).forEach(file => {
          const li = document.createElement('li');
          li.textContent = `${file.name} (${(file.size / 1024).toFixed(1)} KB)`;
          fileListUl.appendChild(li);
        });
        
        submitBtn.disabled = false;
      } else {
        fileList.classList.add('hidden');
        submitBtn.disabled = true;
      }
    }

    function resetForm() {
      // Show upload form and info
      const uploadContainer = document.querySelector('.bg-white');
      const info = document.querySelector('.bg-gray-50');
      uploadContainer.classList.remove('hidden');
      info.classList.remove('hidden');
      
      // Clear file input and selections
      document.getElementById('images').value = '';
      selectedPreviews.clear();
      previewGravitySettings.clear();
      
      // Hide file list and success screen
      document.getElementById('fileList').classList.add('hidden');
      document.getElementById('successScreen').classList.add('hidden');
      
      // Reset file count
      document.getElementById('fileCount').textContent = '';
      
      // Disable submit button
      document.getElementById('submitBtn').disabled = true;
      
      // Clear selected files list
      document.getElementById('fileListUl').innerHTML = '';
      
      // Clear preview grid and hide actions
      document.getElementById('previewGrid').innerHTML = '';
      document.getElementById('previewGrid').classList.add('hidden');
      document.getElementById('previewActions').classList.add('hidden');
    }

    function createPreviewItem(preview) {
      const previewItem = document.createElement('div');
      previewItem.className = 'relative bg-white rounded-lg shadow-sm p-6 border-2 border-gray-200 transition-all duration-200 hover:shadow-lg hover:border-gray-300 cursor-pointer';
      previewItem.dataset.id = preview.id;
      
      // Initialize selection state if preview was previously selected
      if (selectedPreviews.has(preview.id)) {
        previewItem.classList.add('border-blue-500');
      }
      
      previewItem.innerHTML = `
        <img src="${preview.url}" alt="${preview.filename}" class="w-full h-auto rounded transition-transform duration-200 hover:scale-[1.02]">
        <div class="mt-4 space-y-4">
          <div class="text-gray-700 font-medium">${preview.filename}</div>
          <div class="space-y-2">
            <label class="block font-medium text-gray-700">Position:</label>
            <select class="w-full p-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500" onchange="handleGravityChange(this, '${preview.id}')">
              <option value="center" ${preview.gravity === 'center' ? 'selected' : ''}>Center</option>
              <option value="north" ${preview.gravity === 'north' ? 'selected' : ''}>Top</option>
              <option value="south" ${preview.gravity === 'south' ? 'selected' : ''}>Bottom</option>
              <option value="west" ${preview.gravity === 'west' ? 'selected' : ''}>Left</option>
              <option value="east" ${preview.gravity === 'east' ? 'selected' : ''}>Right</option>
              <option value="northwest" ${preview.gravity === 'northwest' ? 'selected' : ''}>Top Left</option>
              <option value="northeast" ${preview.gravity === 'northeast' ? 'selected' : ''}>Top Right</option>
              <option value="southwest" ${preview.gravity === 'southwest' ? 'selected' : ''}>Bottom Left</option>
              <option value="southeast" ${preview.gravity === 'southeast' ? 'selected' : ''}>Bottom Right</option>
            </select>
          </div>
        </div>
        <div class="loading-spinner hidden absolute inset-0 flex items-center justify-center bg-white bg-opacity-75">
          <div class="w-12 h-12 border-4 border-gray-200 border-t-blue-500 rounded-full animate-spin"></div>
        </div>
      `;

      // Add click handler for selection
      previewItem.addEventListener('click', (e) => {
        // Don't toggle selection if clicking on select element
        if (e.target.tagName === 'SELECT' || e.target.tagName === 'OPTION') {
          return;
        }
        
        const id = preview.id;
        if (selectedPreviews.has(id)) {
          selectedPreviews.delete(id);
          previewItem.classList.remove('border-blue-500');
        } else {
          selectedPreviews.add(id);
          previewItem.classList.add('border-blue-500');
        }
        updateExportButton();
      });

      // Store initial gravity setting
      previewGravitySettings.set(preview.id, preview.gravity || 'center');
      
      return previewItem;
    }

    async function handleGravityChange(select, previewId) {
      const previewItem = select.closest('.relative');
      const loading = previewItem.querySelector('.loading-spinner');
      const gravity = select.value;
      const previousValue = previewGravitySettings.get(previewId);

      try {
        loading.classList.remove('hidden');
        const response = await fetch('/reprocess', {
          method: 'POST',
          headers: { 
            'Content-Type': 'application/json',
            'Accept': 'application/json'
          },
          body: JSON.stringify({ previewId, gravity })
        });

        if (!response.ok) {
          throw new Error('Server error: ' + response.status);
        }

        const contentType = response.headers.get('content-type');
        if (!contentType || !contentType.includes('application/json')) {
          throw new Error('Server returned non-JSON response');
        }

        const data = await response.json();
        const img = previewItem.querySelector('img');
        img.src = `${data.url}?t=${Date.now()}`;
        previewGravitySettings.set(previewId, gravity);
      } catch (error) {
        console.error('Error:', error);
        // Reset select to previous value
        select.value = previousValue;
        alert('Failed to change image position. Please try again.');
      } finally {
        loading.classList.add('hidden');
      }
    }

    function updateExportButton() {
      const exportBtn = document.getElementById('exportBtn');
      exportBtn.disabled = selectedPreviews.size === 0;
      exportBtn.textContent = `Export ${selectedPreviews.size} ${selectedPreviews.size === 1 ? 'Image' : 'Images'}`;
    }



    // Form submission handler
    document.getElementById('uploadForm').addEventListener('submit', async function(e) {
      e.preventDefault(); // Prevent normal form submission
      const spinner = document.getElementById('processingSpinner');
      const submitBtn = document.getElementById('submitBtn');
      const originalButtonText = submitBtn.textContent;
      
      try {
        submitBtn.disabled = true;
        submitBtn.textContent = 'Processing...';
        spinner.classList.remove('hidden');
        
        const formData = new FormData(this);
        const response = await fetch('/preview', {
          method: 'POST',
          body: formData
        });
        
        const data = await response.json();
        if (!response.ok) {
          throw new Error(data.error || 'Failed to process images');
        }

        if (!data.previews || !Array.isArray(data.previews)) {
          throw new Error('Invalid response format');
        }
        
        // Clear the form and file list
        this.reset();
        updateFileList();
        
        // Hide upload form and info
        const uploadContainer = document.querySelector('.bg-white');
        const info = document.getElementById('pageInfo');
        uploadContainer.classList.add('hidden');
        info.classList.add('hidden');
        
        // Show previews
        const previewGrid = document.getElementById('previewGrid');
        previewGrid.innerHTML = '';
        previewGrid.classList.remove('hidden');
        
        data.previews.forEach(preview => {
          previewGrid.appendChild(createPreviewItem(preview));
        });
        
        // Show preview actions
        document.getElementById('previewActions').classList.remove('hidden');
        updateExportButton();
        
      } catch (error) {
        alert(error.message);
      } finally {
        submitBtn.disabled = false;
        submitBtn.textContent = originalButtonText;
        spinner.classList.add('hidden');
      }
    });

    // Add event listeners for reset buttons
    document.getElementById('resetBtn').addEventListener('click', resetForm);
    document.getElementById('startOverBtn').addEventListener('click', resetForm);

    // Export button handler
    document.getElementById('exportBtn').addEventListener('click', async function(e) {
      e.preventDefault();
      const startTime = new Date();
      const spinner = document.getElementById('processingSpinner');
      const exportBtn = document.getElementById('exportBtn');
      const originalButtonText = exportBtn.textContent;
      
      try {
        // Show spinner and disable button
        spinner.classList.remove('hidden');
        exportBtn.disabled = true;
        exportBtn.textContent = 'Exporting...';
        
        // Submit selected IDs and their fit methods
        const response = await fetch('/export', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            selectedIds: Array.from(selectedPreviews)
          })
        });
        
        const data = await response.json();
        if (!response.ok) {
          throw new Error(data.error || 'Failed to export images');
        }
        
        // Update success screen
        const endTime = new Date();
        const processingTime = ((endTime - startTime) / 1000).toFixed(1);
        
        document.getElementById('processedCount').textContent = selectedPreviews.size;
        document.getElementById('processingTime').textContent = processingTime;
        document.getElementById('downloadLink').href = data.url;
        document.getElementById('downloadLink').download = data.filename;
        
        // Hide preview grid and show success screen
        document.getElementById('previewGrid').classList.add('hidden');
        document.getElementById('previewActions').classList.add('hidden');
        document.getElementById('successScreen').classList.remove('hidden');
        
      } catch (error) {
        alert(error.message);
      } finally {
        spinner.classList.add('hidden');
        exportBtn.disabled = selectedPreviews.size === 0;
        exportBtn.textContent = originalButtonText;
      }
    });

    // Download link handler - direct download using native browser download
    const downloadLink = document.getElementById('downloadLink');
    if (downloadLink) {
      downloadLink.addEventListener('click', function(e) {
        // Let the native download attribute handle it
        // No need to return anything or prevent default
      });
    }
  </script>
</body>
</html>
